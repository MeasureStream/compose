services:

  postgres:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=mydatabase'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5432'
    networks:
      app_network:
        ipv4_address: 172.20.0.20

  sensor-manager:
    image: 'docker.io/christiand9699/sensor-manager:latest'
    depends_on:
      - postgres
    expose:
      - '8080'
    environment:
      - 'SPRING_DATASOURCE_URL=jdbc:postgresql://postgres/mydatabase'
      - 'SPRING_DATASOURCE_USERNAME=myuser'
      - 'SPRING_DATASOURCE_PASSWORD=secret'
      - 'OS=raspberrypi'
    networks:
      app_network:
        ipv4_address: 172.20.0.10

  mongodb:
    image: arm64v8/mongo:4.4.18
    environment:
      - 'MONGO_INITDB_DATABASE=mydatabase'
      - 'MONGO_INITDB_ROOT_PASSWORD=secret'
      - 'MONGO_INITDB_ROOT_USERNAME=root'
    ports:
      - '27017:27017'
    networks:
      app_network:
        ipv4_address: 172.20.0.23
    volumes:
      - mongo_data:/data/db
      - ./mongod.conf:/etc/mongod.conf
    command: ["mongod", "--config", "/etc/mongod.conf"]
    healthcheck:
      test: [  "CMD", "mongo", "--eval", "db.runCommand({ ping: 1 }).ok" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  measure-manager:
    image: 'docker.io/christiand9699/measure:latest'
    depends_on:
      mongodb:
        condition: service_healthy
    expose:
      - '8080'
    environment:
      - 'SPRING_DATA_MONGODB_URI=mongodb://root:secret@172.20.0.23:27017/mydatabase?authSource=admin'
    networks:
      app_network:
        ipv4_address: 172.20.0.11

  keycloak-db:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=keycloak'
      - 'POSTGRES_USER=keycloak'
      - 'POSTGRES_PASSWORD=keycloakpassword'
    volumes:
      - keycloak-db-data:/var/lib/postgresql/data
    ports:
      - '5433:5432'
    networks:
      app_network:
        ipv4_address: 172.20.0.21

  keycloak:
    image: keycloak/keycloak
    depends_on:
      - keycloak-db
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloakpassword
    volumes:
      - /home/measurestream/certificates/keycloak:/etc/x509/https:ro
    ports:
      - "8443:8443"
      - "9000:9000"   # espone management port
    command: >
      start
      --https-certificate-file=/etc/x509/https/cert.pem
      --https-certificate-key-file=/etc/x509/https/privkey.pem
      --hostname=auth.christiandellisanti.uk
      --hostname-strict=false
      --proxy-headers=forwarded
      --health-enabled=true
    


    networks:
      app_network:
        ipv4_address: 172.20.0.22

    healthcheck:
      test: [
        "CMD-SHELL",
        "timeout 1 bash -c '</dev/tcp/localhost/9000' && echo 'Port is open' || exit 1"
      ]
      interval: 15s
      retries: 15
      start_period: 60s
      timeout: 5s

    #healthcheck:
    #  test: [
    #    "CMD-SHELL",
    #    "exec 3<> /dev/tcp/127.0.0.1/9000; echo -e 'GET /health/ready HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3; cat <&3 | grep 'HTTP/1.1 200 OK' || exit 1"
    #  ]
    #  interval: 15s
    #  retries: 15
    #  start_period: 60s
    #  timeout: 2s


  grafana:
    image: grafana/grafana-enterprise
    restart: always
    volumes:
      - grafana_data:/var/lib/grafana
      - /var/lib/grafana/plugins
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=yesoreyeram-infinity-datasource
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_SECURITY_ALLOW_EMBEDDING=true


    networks:
      app_network:
        ipv4_address: 172.20.0.30


  frontend:
    image: 'docker.io/christiand9699/frontend-react:latest'
    ports:
      - "5173:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    #environment:
    #  NODE_ENV: development
    #stdin_open: true
    #tty: true
    #command: ["npm", "run", "dev", "--", "--host"]
    networks:
      app_network:
        ipv4_address: 172.20.0.12

  gateway-iam:
    image: 'docker.io/christiand9699/gateway-iam:latest'
    depends_on:
      keycloak:
        condition: service_healthy
    ports:
      - '8080:8080'
    environment:
      - 'SPRING_DATASOURCE_URL=jdbc:postgresql://postgres/mydatabase'
      - 'SPRING_DATASOURCE_USERNAME=myuser'
      - 'SPRING_DATASOURCE_PASSWORD=secret'
      - 'OS=raspberrypi'
    #extra_hosts:
    #  - "auth.christiandellisanti.uk:172.20.0.22"
    networks:
      app_network:
        ipv4_address: 172.20.0.200
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/me" ]
      interval: 10s        # Ogni 10 secondi
      timeout: 5s          # Timeout di 5 secondi per la risposta
      retries: 5           # Prova fino a 5 volte prima di fallire
      start_period: 120s

  kafka:
    image: 'bitnami/kafka:3.7'
    hostname: kafka
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:29092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://130.192.164.73:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    networks:
      app_network:
        ipv4_address: 172.20.0.40




volumes:
  postgres-data:
  keycloak-db-data:
  mongo_data:
  grafana_data:
  kafka_data:

networks:
  app_network:
    ipam:
      config:
        - subnet: 172.20.0.0/24
